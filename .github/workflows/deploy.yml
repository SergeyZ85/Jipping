name: Deploy Jipping Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  APP_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/jipping-app
  SERVER_IP: 193.168.46.38
  SSH_USER: root
  PROJECT_DIR: /opt/jipping-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup environment variables
      run: |
        echo "DB_DRIVER=postgresql+psycopg" >> $GITHUB_ENV
        echo "DB_HOST=db" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "DB_NAME=passenger_accounting" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "PROJECT_NAME=Jipping" >> $GITHUB_ENV

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push application image
      run: |
        docker build -t $APP_IMAGE:latest \
          --build-arg DB_DRIVER=$DB_DRIVER \
          --build-arg DB_HOST=$DB_HOST \
          --build-arg DB_NAME=$DB_NAME \
          --build-arg DB_USER=$DB_USER \
          --build-arg DB_PASSWORD=$DB_PASSWORD \
          .
        docker push $APP_IMAGE:latest

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Prepare deployment files
      run: |
        # Создаем .env файл для production
        cat <<EOT > .env.production
        DB_DRIVER=$DB_DRIVER
        DB_HOST=$DB_HOST
        DB_PORT=$DB_PORT
        DB_NAME=$DB_NAME
        DB_USER=$DB_USER
        DB_PASSWORD=$DB_PASSWORD
        PROJECT_NAME=$PROJECT_NAME
        EOT

        # Копируем необходимые файлы
        scp -o StrictHostKeyChecking=no \
          docker-compose.yml \
          nginx.conf \
          .env.production \
          $SSH_USER@$SERVER_IP:$PROJECT_DIR/

    - name: Deploy stack
      run: |
        ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP << 'EOF'
          cd $PROJECT_DIR
          mv .env.production .env
          docker-compose down
          docker-compose pull
          docker-compose up -d --build
          docker exec ${PROJECT_NAME}_app python manage.py migrate
          docker system prune -f
        EOF

    - name: Verify services
      run: |
        ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP << 'EOF'
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          curl -s http://localhost/health
        EOF
